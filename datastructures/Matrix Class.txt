def transpose(A):
	for i in range(0,len(A)):
		for j in range(i,len(A)):
			if i != j:
				A[i][j],A[j][i]=A[j][i],A[i][j]

def vector_multi(x,y):
	c=[None]*len(x)
	mid = int(len(x)/2)
	if len(x)==1:
		return [x[0]*y[0]]
	else:
		return vector_multi(x[:mid],y[:mid])+vector_multi(x[mid:len(x)],y[mid:len(y)])

def matrix_mult(A,B):
	C=[[None]*len(A[0]) for s in range(len(A))]
	transpose(B)
	for i in range(len(A)):
		for j in range(len(A[0])):
			C[i][j] = dot_recursive(A[i],B[j])
	transpose(B)
	return C

def dot_recursive(x,y):
	mid = int(len(x)/2)
	if len(x)==1:
		return x[0]*y[0]
	else:
		return dot_recursive(x[:mid],y[:mid])+dot_recursive(x[mid:len(x)],y[mid:len(y)])

class matrix:
	def __init__(self,rows):
		self.rows = rows
		self.columns = None
	def transpose(self):
		for i in range(0,len(self.rows)):
			for j in range(i,len(self.rows)):
				if i != j:
					self.rows[i][j],self.rows[j][i]=self.rows[j][i],self.rows[i][j]
	def columns(self):
		if not(self.columns):
			self.transpose()
	def rows(self):
		if not(self.rows):
			self.transpose()